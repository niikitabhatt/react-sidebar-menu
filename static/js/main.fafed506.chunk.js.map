{"version":3,"sources":["components/SideBar.js","components/Navbar.js","pages/Trips.js","pages/Flights.js","pages/ThingsToDo.js","pages/Hotels.js","pages/VacationRentals.js","App.js","serviceWorker.js","index.js"],"names":["SideBar","handleSlideBar","className","to","onClick","exact","activeClassName","Navbar","useState","slideBar","setSlideBar","Trips","Flights","ThingsToDo","Hotels","VacationRentals","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sWAmGeA,MA9Ff,YAAoC,IAAlBC,EAAiB,EAAjBA,eAEhB,OAEI,wBAAIC,UAAU,gBAEZ,wBAAIA,UAAU,gBACZ,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,qBACrB,wBAAIA,UAAU,oBAAoBE,QAASH,GAA3C,gBACe,kBAAC,IAAD,SAMnB,wBAAIC,UAAU,iBACZ,kBAAC,IAAD,CACEG,OAAK,EACLF,GAAG,IACHD,UAAU,OACVI,gBAAgB,YAChBF,QAASH,GAET,yBAAKC,UAAU,aACb,kBAAC,IAAD,OAEF,yBAAKA,UAAU,cAAf,WAKJ,wBAAIA,UAAU,iBACZ,kBAAC,IAAD,CACEC,GAAG,gBACHD,UAAU,OACVI,gBAAgB,YAChBF,QAASH,GAET,yBAAKC,UAAU,aACb,kBAAC,IAAD,OAEF,yBAAKA,UAAU,cAAf,kBAKJ,wBAAIA,UAAU,iBACZ,kBAAC,IAAD,CACEC,GAAG,WACHD,UAAU,OACVI,gBAAgB,YAChBF,QAASH,GAET,yBAAKC,UAAU,aACb,kBAAC,IAAD,OAEF,yBAAKA,UAAU,cAAf,aAKJ,wBAAIA,UAAU,iBACZ,kBAAC,IAAD,CACEC,GAAG,UACHD,UAAU,OACVI,gBAAgB,YAChBF,QAASH,GAET,yBAAKC,UAAU,aACb,kBAAC,IAAD,OAEF,yBAAKA,UAAU,cAAf,YAKJ,wBAAIA,UAAU,iBACZ,kBAAC,IAAD,CACEC,GAAG,oBACHD,UAAU,OACVI,gBAAgB,YAChBF,QAASH,GAET,yBAAKC,UAAU,aACb,kBAAC,IAAD,OAEF,yBAAKA,UAAU,cAAf,wB,MC3DGK,MA1Bf,WAAmB,IAAD,EACcC,oBAAS,GADvB,mBACXC,EADW,KACDC,EADC,KAGVT,EAAiB,WACrBS,GAAaD,IAGf,OAEE,kBAAC,WAAD,KAEE,yBAAKP,UAAU,UACb,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,gBACrB,kBAAC,IAAD,CAAcE,QAASH,EAAgBC,UAAU,gBAEnD,wBAAIA,UAAU,YAAd,kBAIF,yBAAKA,UAAWO,EAAW,sBAAwB,gBAChD,kBAAC,EAAD,CAASR,eAAkBA,O,aChBrBU,MARf,WACI,OACI,uCCMOC,MARf,WACI,OACI,yCCMOC,MARf,WACI,OACI,8CCOOC,MATf,WACI,OACI,wCCMOC,MARf,WACI,OACI,kDCwBOC,MAjBf,WACE,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOX,OAAK,EAACY,KAAK,IAAIC,UAAWP,IACjC,kBAAC,IAAD,CAAQM,KAAK,gBAAgBC,UAAWL,IACxC,kBAAC,IAAD,CAAQI,KAAK,WAAWC,UAAWN,IACnC,kBAAC,IAAD,CAAQK,KAAK,SAASC,UAAWJ,IACjC,kBAAC,IAAD,CAAQG,KAAK,oBAAoBC,UAAWH,QCTlCI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fafed506.chunk.js","sourcesContent":["import React from \"react\";\r\nimport * as Icons from \"@material-ui/icons\";\r\nimport \"../styles/Slidebar.css\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\n\r\nfunction SideBar({handleSlideBar}) {\r\n\r\n  return (\r\n    \r\n      <ul className=\"sidebar-list\">\r\n        {/** Slidebar logo */}\r\n        <li className=\"sidebar-logo\">\r\n          <Link to=\"#\" className=\"sidebar-logo-link\">\r\n            <h3 className=\"sidebar-logo-text\" onClick={handleSlideBar}>\r\n              Nanital Tour <Icons.Close></Icons.Close>\r\n            </h3>\r\n          </Link>\r\n        </li>\r\n\r\n        {/** slidebar items - Trips */}\r\n        <li className=\"sidebar-items\">\r\n          <NavLink\r\n            exact\r\n            to=\"/\"\r\n            className=\"item\"\r\n            activeClassName=\"activeNav\"\r\n            onClick={handleSlideBar}\r\n          >\r\n            <div className=\"item-icon\">\r\n              <Icons.EmojiTransportation />\r\n            </div>\r\n            <div className=\"item-title\">Trips</div>\r\n          </NavLink>\r\n        </li>\r\n\r\n        {/** slidebar item - todo */}\r\n        <li className=\"sidebar-items\">\r\n          <NavLink\r\n            to=\"/things-to-do\"\r\n            className=\"item\"\r\n            activeClassName=\"activeNav\"\r\n            onClick={handleSlideBar}\r\n          >\r\n            <div className=\"item-icon\">\r\n              <Icons.CameraAlt />\r\n            </div>\r\n            <div className=\"item-title\">Things To Do</div>\r\n          </NavLink>\r\n        </li>\r\n\r\n        {/** slidebar item - Flights*/}\r\n        <li className=\"sidebar-items\">\r\n          <NavLink\r\n            to=\"/flights\"\r\n            className=\"item\"\r\n            activeClassName=\"activeNav\"\r\n            onClick={handleSlideBar}\r\n          >\r\n            <div className=\"item-icon\">\r\n              <Icons.Flight />\r\n            </div>\r\n            <div className=\"item-title\">Flights</div>\r\n          </NavLink>\r\n        </li>\r\n\r\n        {/** Slidebar item-  Hotels  */}\r\n        <li className=\"sidebar-items\">\r\n          <NavLink\r\n            to=\"/hotels\"\r\n            className=\"item\"\r\n            activeClassName=\"activeNav\"\r\n            onClick={handleSlideBar}\r\n          >\r\n            <div className=\"item-icon\">\r\n              <Icons.Hotel />\r\n            </div>\r\n            <div className=\"item-title\">Hotels</div>\r\n          </NavLink>\r\n        </li>\r\n\r\n        {/** Slidebar item- Vacation Rentals */}\r\n        <li className=\"sidebar-items\">\r\n          <NavLink\r\n            to=\"/vacation-rentals\"\r\n            className=\"item\"\r\n            activeClassName=\"activeNav\"\r\n            onClick={handleSlideBar}\r\n          >\r\n            <div className=\"item-icon\">\r\n              <Icons.House />\r\n            </div>\r\n            <div className=\"item-title\">Vacation Rentals</div>\r\n          </NavLink>\r\n        </li>\r\n      </ul>\r\n \r\n  );\r\n}\r\n\r\nexport default SideBar;\r\n","import React, { Fragment, useState } from \"react\";\r\nimport * as Icons from \"@material-ui/icons\";\r\nimport { Link } from \"react-router-dom\";\r\nimport SideBar from \"./SideBar\";\r\nimport \"../styles/Navbar.css\";\r\n\r\nfunction Navbar() {\r\n  let [slideBar, setSlideBar] = useState(false);\r\n\r\n  const handleSlideBar = () => {\r\n    setSlideBar(!slideBar);\r\n  };\r\n \r\n  return (\r\n   \r\n    <Fragment>\r\n     {/** Navbar at the top of the screen */}\r\n      <div className=\"navbar\">\r\n        <Link to=\"#\" className=\"sidebar-link\">\r\n          <Icons.Dehaze onClick={handleSlideBar} className=\"icon-style\" />\r\n        </Link>\r\n        <h3 className=\"nav-logo\"> Nanital Tour</h3>\r\n      </div>\r\n\r\n    {/** Sidebar menu present in the navbar  which opens or close according to the button click */}\r\n      <nav className={slideBar ? \"sidebar-menu active\" : \"sidebar-menu\"}>\r\n         <SideBar handleSlideBar = {handleSlideBar} ></SideBar>     \r\n      </nav>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react'\r\n\r\nfunction Trips() {\r\n    return (\r\n        <div>\r\n            Trips\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Trips\r\n","import React from 'react'\r\n\r\nfunction Flights() {\r\n    return (\r\n        <div>\r\n            Flights\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Flights\r\n","import React from 'react'\r\n\r\nfunction ThingsToDo() {\r\n    return (\r\n        <div>\r\n            things to do \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ThingsToDo\r\n","import React from 'react'\r\n\r\nfunction Hotels() {\r\n    return (\r\n        <div>\r\n            Hotels\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Hotels\r\n","import React from 'react'\r\n\r\nfunction VacationRentals() {\r\n    return (\r\n        <div>\r\n            Vacation Rentals\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VacationRentals\r\n","import React, {Fragment} from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Trips from \"./pages/Trips\";\nimport Flights from \"./pages/Flights\";\nimport ThingsToDo from \"./pages/ThingsToDo\";\nimport Hotels from \"./pages/Hotels\";\nimport VacationRentals from \"./pages/VacationRentals\";\n\n\nfunction App() {\n  return (\n    <Fragment>\n      <Router>\n        <Navbar></Navbar>\n        <Switch>\n          <Route exact path=\"/\" component={Trips}></Route>\n          <Route  path=\"/things-to-do\" component={ThingsToDo}></Route>\n          <Route  path=\"/flights\" component={Flights}></Route>\n          <Route  path=\"/hotel\" component={Hotels}></Route>\n          <Route  path=\"/vacation-rentals\" component={VacationRentals}></Route>\n        </Switch>\n      </Router>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}